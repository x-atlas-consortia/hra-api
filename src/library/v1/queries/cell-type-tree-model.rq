#  This CONSTRUCT SPARQL query constructs an ontology tree model for a specific cell type (CL_0000000) 
#  and its hierarchical structure based on the CCF ontology.
#  
#  * Query Structure:
#       The query constructs an RDF graph representing the ontology tree structure for a specific cell type.
#       It includes information such as the cell type's label, type, parent-child relationships, and synonym labels.
#  
#  * Data Sources:
#       - The query retrieves data from the CCF ontology specified in the FROM clause.
#       - The CCF ontology is available at <https://purl.org/ccf/releases/2.2.1/ccf.owl>
#  
#  * @param ?cellLabel     - The label of the specified cell type.
#  * @param ?child         - The child node in the ontology tree.
#  * @param ?parent        - The parent node in the ontology tree.
#  * @param ?label         - The label of each node in the ontology tree.
#  * @param ?synonymLabel  - Synonym labels for nodes in the ontology tree.
#  
#  * Note: Replace "cell:" with the IRI of the specific cell type you want to retrieve the ontology tree for.
#          The query constructs the ontology tree starting from the specified cell type and traversing its subClassOf relationships.
#  

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ccf: <http://purl.org/ccf/>
PREFIX cell: <http://purl.obolibrary.org/obo/CL_0000000>
PREFIX CCF: <https://purl.humanatlas.io/graph/ccf>

CONSTRUCT {
  cell: rdfs:label ?cellLabel .
  cell: rdf:type ccf:OntologyTreeNode .
  cell: ccf:is_root_for "AS" .
  ?child rdf:type ccf:OntologyTreeNode .
  ?child ccf:parent ?parent .
  ?child rdfs:label ?label .
  ?child ccf:synonymLabels ?synonymLabel .
}
FROM CCF:
WHERE { # Ontology / CCF.OWL
  cell: ^rdfs:subClassOf* ?child .
  cell: rdfs:label ?cellLabel .
  ?child rdfs:subClassOf ?parent .
  ?child rdfs:label ?label1 .
  ?child ccf:ccf_pref_label ?synonymLabel1 .
  FILTER (!isBlank(?child) && !isBlank(?parent))

  BIND(STR(?label1) as ?label)
  BIND(STR(?synonymLabel1) as ?synonymLabel)
}
